{{- if .Values.cdcs.celery.startService }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-cdcs-celery-beat
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      component: cdcs-celery-beat
  template:
    metadata:
      labels:
        component: cdcs-celery-beat
    spec:
      containers:
      - image: {{ .Values.cdcs.image }}:{{ .Values.cdcs.tag }}
        imagePullPolicy: {{ .Values.cdcs.imagePullPolicy }}
        name: cdcs
        command:
        - "/docker-entrypoint-celery-beat.sh"
        args: ["$(PROJECT_NAME)"]
        env:
        {{- range .Values.cdcs.envs }}
        - name: {{ .name }}
          value: "{{ .value }}"
        {{- end }}
        - name: DJANGO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ tpl (.Values.cdcs.secret.name) . }}"
              key: django_secret_key
        {{- if eq .Values.postgresql.architecture "replication" }}
        - name: POSTGRES_HOST
          value: "{{ .Release.Name }}-postgresql-{{.Values.postgresql.primary.name}}"
        {{- else }}
        - name: POSTGRES_HOST
          value: "{{ .Release.Name }}-postgresql"
        {{- end }}
        - name: POSTGRES_PORT
          value: "{{ .Values.postgresql.primary.service.ports.postgresql }}"
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: "{{ tpl (.Values.postgresql.secret.name) . }}"
              key: database
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: "{{ tpl (.Values.postgresql.secret.name) . }}"
              key: username
        - name: POSTGRES_PASS
          valueFrom:
            secretKeyRef:
              name: "{{ tpl (.Values.postgresql.secret.name) . }}"
              key: password
        {{- if eq .Values.postgresql.architecture "replication" }}
        - name: POSTGRES_REPLICA_HOST
          value: "{{ .Release.Name }}-postgresql-{{.Values.postgresql.readReplicas.name}}"
        - name: POSTGRES_REPLICA_PORT
          value: "{{ .Values.postgresql.readReplicas.service.ports.postgresql }}"
        - name: POSTGRES_REPLICA_DB
          valueFrom:
            secretKeyRef:
              name: "{{ tpl (.Values.postgresql.secret.name) . }}"
              key: database
        - name: POSTGRES_REPLICA_USER
          valueFrom:
            secretKeyRef:
              name: "{{ tpl (.Values.postgresql.secret.name) . }}"
              key: username
        - name: POSTGRES_REPLICA_PASS
          valueFrom:
            secretKeyRef:
              name: "{{ tpl (.Values.postgresql.secret.name) . }}"
              key: password
        {{- end }}
        - name: MONGO_HOST
          value: "{{ .Release.Name }}-mongodb"
        - name: MONGO_PORT
          value: "{{ .Values.mongodb.service.ports.mongodb }}"
        {{- with (first .Values.mongodb.auth.databases) }}
        - name: MONGO_DB
          value: {{ . }}
        {{- end }}
        {{- with (first .Values.mongodb.auth.usernames) }}
        - name: MONGO_USER
          value: {{ . }}
        {{- end }}
        {{- if .Values.mongodb.auth.existingSecret }}
        - name: MONGO_PASS
          valueFrom:
            secretKeyRef:
              name: "{{ tpl (.Values.mongodb.auth.existingSecret) . }}"
              key: mongodb-passwords
        {{- else }}
        {{- with (first .Values.mongodb.auth.passwords) }}
        - name: MONGO_PASS
          value: {{.}}
        {{- end }}
        {{- end }}
        - name: REDIS_HOST
          value: "{{ .Release.Name }}-redis-master"
        - name: REDIS_PORT
          value: "{{ .Values.redis.service.ports.redis }}"
        {{- if .Values.redis.auth.existingSecret }}
        - name: REDIS_PASS
          valueFrom:
            secretKeyRef:
              name: "{{ tpl (.Values.redis.auth.existingSecret) . }}"
              key: "{{ .Values.redis.auth.existingSecretPasswordKey }}"
        {{- else }}
        - name: REDIS_PASS
          valueFrom:
            secretKeyRef:
              name: "{{ tpl (.Values.redis.secret.name) . }}"
              key: password
        {{- end }}
        - name: DJANGO_SETTINGS_MODULE
          value: "$(PROJECT_NAME).$(SETTINGS)"
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      restartPolicy: Always
      {{- with .Values.cdcs.celery.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.cdcs.celery.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.cdcs.celery.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}